generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false) @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  sessions      Session[]
  accounts      Account[]
  categories    Category[]
  documents     Document[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime @map("expires_at")
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("verification")
}

enum DocumentStatusEnum {
  PROCESSING
  READY
  FAILED
}

model Document {
  id         String             @id @default(cuid())
  title      String
  descrption String             @db.Text
  filePath   String             @map("file_path")
  fileSize Int @default(0) @map("file_size")
  pageCount Int @default(0) @map("page_count")
  coverPath  String?            @map("cover_path")
  status     DocumentStatusEnum @default(PROCESSING)
  categoryId String             @map("category_id")
  category   Category           @relation(fields: [categoryId], references: [id])
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")
  author     User?              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String?            @map("author_id")
  messages Message[]

  @@map("documents")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  documents Document[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @map("user_id")

  @@map("categories")
}

enum MessageSender {
  USER
  AI
}

model Message {
  id String @id @default(cuid())
  documentId String @map("document_id")
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sender MessageSender
  content String @db.Text
  metadata Json?
  createdAt DateTime @default(now())

  @@map("messages")
}
